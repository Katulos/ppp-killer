[build-system]
requires = ["setuptools>=61.0.0,<69.3.0"]
build-backend = "setuptools.build_meta"

[project]
name = "ppp-killer"
dynamic = ["version"]
requires-python = ">= 3.8"
dependencies = [
    "ansible-runner==2.3.6",
    "bcrypt==4.2.1",
    "itsdangerous==2.2.0",
    "pydantic-settings==2.6.1",
    "pydantic[email]==2.10.3",
    "sqlalchemy==2.0.36",
    "starlette-admin[i18n]==0.14.1",
    "starlette==0.41.3",
    "uvicorn==0.32.1",
]
authors = [
    { name = "Katulos", email = "katulos@protonmail.com" },
]
description = "The application manages PPPoE servers and VLAN's."
readme = "README.md"
license = {text = "BSD-3-Clause"}

[project.optional-dependencies]
dev = [
    "bump-my-version==0.28.1",
    "git-cliff==2.6.1",
    "mypy==1.13.0",
    "pip-tools==6.14.0",
    "pre-commit==3.5.0",
    "ruff==0.7.2",
]
test = [
    "pytest==8.3.4",
]

[tool.setuptools]
packages = ['app']

[tool.setuptools.dynamic]
version = {attr = "app.__version__"}

[tool.setuptools.package-data]
app= ['migrations/*']

[tool.black]
line-length = 78
target-version = ['py38']
include = '\.pyi?$'
exclude = '''
(
  /(
      \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | \venv
    | _build
    | buck-out
    | build
    | dist
  )/
  | foo.py           # also separately exclude a file named foo.py in
                     # the root of the project
)
'''

[tool.ruff]
exclude = ["*.pyi", ".tox", ".git", "venv", ".venv", "debian"]
line-length = 78
indent-width = 4
target-version = 'py38'

[tool.ruff.lint]
select = [
    'B',      # flake8-bugbear
    'C4',     # flake8-comprehensions
    'D',      # pydocstyle
    'E',      # pycodestyle (Error)
    'F',      # Pyflakes
    'I',      # isort
    'PYI006', # flake8-pyi
    'RUF100', # unused noqa (auto-fixable)
    'T10',    # flake8-debugger
    'T20',    # flake8-print
    # 'UP',     # pyupgrade
    'YTT',    # flake8-2020
]

ignore = [
    #### specific rules
    "D100",   # ignore missing docs
    "D101",   # ignore missing docs
    "D102",   # ignore missing docs
    "D103",   # ignore missing docs
    "D104",   # ignore missing docs
    "D105",   # ignore missing docs
    "D106",   # ignore missing docs
    "D107",   # ignore missing docs
    "D205",   # ignore missing docs
    "D211",   # ignore missing docs
    "D213",   # ignore missing docs
    "D401",   # ignore missing docs
    "E203",
    "E266",
    "E501",
    # "F401", # ignore unused import
    "F403",
]
fixable = ["A", "B", "C4", "E", "F", "I", "TID"]
unfixable = []
flake8-quotes = {inline-quotes = 'single', multiline-quotes = 'double'}
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
required-imports = ["from __future__ import annotations"]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.bumpversion]
current_version = "0.0.0"
commit = true
tag = false
message = "Bump version: {current_version} -> {new_version}"
parse = """(?x)
    (?P<major>0|[1-9]\\d*)\\.
    (?P<minor>0|[1-9]\\d*)\\.
    (?P<patch>0|[1-9]\\d*)
    (?:
        -                             # dash separator for pre-release section
        (?P<pre_l>[a-zA-Z-]+)         # pre-release label
        (?P<pre_n>0|[1-9]\\d*)        # pre-release version number
    )?                                # pre-release section is optional
"""
serialize = [
    "{major}.{minor}.{patch}-{pre_l}{pre_n}",
    "{major}.{minor}.{patch}",
]

[tool.bumpversion.parts.dev]
values = ["release", "dev"]

[tool.bumpversion.parts.pre_l]
values = ["dev", "rc", "final"]
optional_value = "final"

[[tool.bumpversion.files]]
filename = "app/__init__.py"
